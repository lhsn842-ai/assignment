"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

input InputCurrencyExchange {
    amount: Int!
    fromCurrency: String! @rules(apply: ["size:3"])
    toCurrency: String! @rules(apply: ["size:3"])
}

type CurrencyExchange @model(class: "App\\Models\\ExchangeRate") {
    id: ID!
    fromCurrency: String! @rename(attribute: "from_currency")
    toCurrency: String! @rename(attribute: "to_currency")
    userId: String! @rename(attribute: "user_id")
    amount: Float!
    status: String!
    result: Float
    created_at: DateTime!
    updated_at: DateTime!
}


type CurrencyExchangeResponse {
    statusCode: Int!
    message: String!
    data: CurrencyExchange
}

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type AuthPayload {
    status: Int!
    message: String!
    token: String
    user: User
}

type Mutation {
    exchange(input: InputCurrencyExchange!): CurrencyExchangeResponse @field(resolver: "App\\GraphQL\\Mutations\\ExchangeRateMutation@create") @guard(with: ["sanctum"])

    login(email: String!, password: String!): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@login")
}
